import Dice from './dice'
import GameMode from './gameMode';
import GameManager from './gameManager';

const Player = () => {

    class PlayerObj {

        // How many chips the player has.
        // Also how many rolls the player performs each turn.
        private chips: number = 3;
    
        // Unique player ID.
        private playerId: number;
    
        // Determines whether the player can participate in a turn.
        // Only applicable on High-Risk Mode (currently).
        private disqualified: boolean = false;
    
        // Number of centers the player has rolled in one turn.
        // Should this reach three and the game is on High-Risk Mode,
        // the player will be disqualified.
        private centersRolled = 0;
    
        // A reference to this game's manager object.
        private gameManager: GameManager;
    
        constructor(playerId: number, gameManager: GameManager) {
            this.playerId = playerId
            this.gameManager = gameManager;
        }
    
        play(gameManager: GameManager) {
            if (!this.disqualified) {
                const rolls = this.numberOfRolls();
                for (let i = 0; i < rolls; i++) {
                    const numberRolled = this.roll()!
                    console.log("Player " + this.playerId + " rolled " + numberRolled)
                    this.distributeChips(numberRolled, gameManager);
    
                    if (this.isHighRiskMode() && this.centersRolled == 3) {
                        this.disqualify();
                    }
                    
                    this.centersRolled = 0;
                }
            }
        }
    
        roll() {
            let randomNumber = Math.random() * 6
    
            // Elementary RNG algorithm for the dice
            if (randomNumber >= 0 && randomNumber < 3) {
                return Dice.Faces.DOT
            }
            else if (randomNumber >= 3 && randomNumber < 4) {
                return Dice.Faces.LEFT
            }
            else if (randomNumber >= 4 && randomNumber < 5) {
                this.centersRolled += 1
                return Dice.Faces.CENTER
            }
            else if (randomNumber >= 5 && randomNumber < 6) {
                return Dice.Faces.RIGHT
            }
    
        }
    
        // Method to determine how many rolls a player can perform in a given turn.
        numberOfRolls(): number {
            if (this.chips >= 3) {
                return 3
            }
            else {
                return this.chips;
            }
        }
        
        hasMoney(): boolean {return this.chips > 0};
    
        getPlayerId(): number {return this.playerId};
    
        getChips(): number {return this.chips};
    
        private disqualify() {this.disqualified = true}
    
        private forfeitChipToPlayer(otherPlayer: PlayerObj) {
            if (this.hasMoney()) {
                console.log("Player " + this.playerId + " forfeits a chip to player " + otherPlayer.getPlayerId() + ".")
                otherPlayer.chips += 1;
                this.chips -= 1;
            }
        }
    
        private forfeitChipToPot(gameManager: GameManager) {
            if (this.hasMoney()) {
                console.log("Player " + this.playerId + " forfeits a chip to the pot.")
                gameManager.addChipToPot();
                this.chips -= 1;
            }
            
        }
    
        // Determines the disposition of chips after a player rolls.
        // Takes the number generated by roll() to determine where the chips go.
        // Takes the gameManager instance to put money in the pot and apply 
        // special (i.e., High-Risk/Unfair mode) rules.
        private distributeChips(rollNumber: number, gameManager: GameManager) {
            const currentPlay = gameManager.getCurrentPlayNumber();
            const player: PlayerObj = gameManager.getPlayer(currentPlay + rollNumber)!;
    
            switch (rollNumber) {
                case Dice.Faces.LEFT:
                    // A previous player now has chips, so reset this counter
                    gameManager.resetTappedCounter();
                    this.forfeitChipToPlayer(player);
                    break;
                case Dice.Faces.RIGHT:
                    this.forfeitChipToPlayer(player);
                    break;
                case Dice.Faces.CENTER:
                    this.forfeitChipToPot(gameManager);
                    break;
                case Dice.Faces.DOT:
                    // Do nothing; your chips are safe!
            }
        }
    
        // Assumed by the base game logic, but I added this *just in case*
        private isNormalMode(): boolean {return this.gameManager.getGameMode() == GameMode.Modes.NORMAL};
    
        private isHighRiskMode(): boolean {return this.gameManager.getGameMode() == GameMode.Modes.HIGH_RISK};
    
        private isUnfairMode(): boolean {return this.gameManager.getGameMode() == GameMode.Modes.UNFAIR};
    }

    return (
        <div>

        </div>
    )
}

export { Player.PlayerObj };
export default Player